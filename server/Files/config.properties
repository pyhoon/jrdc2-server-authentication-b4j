## Product: 	jRDC2 Server
## Version:		2.25
## Author:	    Aeric Poon
## Github:      https://github.com/pyhoon/jrdc2-server-authentication-b4j
## Description: This is a modified version of B4J jRDC2
## Original source can be found at https://www.b4x.com/android/forum/threads/b4x-jrdc2-b4j-implementation-of-rdc-remote-database-connector.61801/

## Lines starting with '#' are comments.
## Backslash character at the end of line means that the command continues in the next line.

###############################################################################################
## SERVER CONFIGURATION
###############################################################################################

## Java server port
ServerPort=17178
SSLPort=0

## Windows server
## Leave SSL_KEYSTORE_DIR as empty (Objects folder or File.DirApp)
SSL_KEYSTORE_DIR=
SSL_KEYSTORE_FILE=keystore
SSL_KEYSTORE_PASSWORD=xxxxxx

## Linux server
## Let's Encrypt SSL Keystores
##SSL_KEYSTORE_DIR=/etc/letsencrypt/live/mydomain.com
##SSL_KEYSTORE_FILE=keystore.jks
##SSL_KEYSTORE_PASSWORD=xxxxxx

###############################################################################################
## DATABASE CONFIGURATION
###############################################################################################

## SQLite configuration:
SQLite.DBDir=
SQLite.DBFile=animal.db

## MySQL configuration:
MySQL.DriverClass=com.mysql.cj.jdbc.Driver
MySQL.JdbcUrl=jdbc:mysql://localhost/{DBName}?characterEncoding=utf8&useSSL=false
MySQL.DBName=animal
MySQL.User=root
MySQL.Password=password

###############################################################################################
## MySQL Schema
###############################################################################################
MySQL.CHECK_DATABASE=SELECT * FROM SCHEMATA WHERE SCHEMA_NAME = ?
MySQL.CREATE_DATABASE=CREATE DATABASE `{DBName}` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
MySQL.USE_DATABASE=USE `{DBName}`
MySQL.create_table_users=CREATE TABLE `users` ( \
 `id` int(11) NOT NULL AUTO_INCREMENT, \
 `name` varchar(200) COLLATE utf8mb4_unicode_ci DEFAULT NULL, \
 `password` varchar(200) COLLATE utf8mb4_unicode_ci DEFAULT NULL, \
 PRIMARY KEY (`id`) \
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
MySQL.create_table_animals=CREATE TABLE `animals` ( \
 `id` int(11) NOT NULL AUTO_INCREMENT, \
 `name` varchar(200) COLLATE utf8mb4_unicode_ci DEFAULT NULL, \
 `image` blob DEFAULT NULL, \
 `user_id` int(11) NOT NULL, \
 PRIMARY KEY (`id`) \
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
MySQL.get_last_insert_id=SELECT LAST_INSERT_ID()

###############################################################################################
## SQLite Schema
###############################################################################################
SQLite.create_table_users=CREATE TABLE IF NOT EXISTS `users` ( \
	`id`	INTEGER, \
	`name`	TEXT, \
	`password`	TEXT, \
	PRIMARY KEY(`id` AUTOINCREMENT) \
)
SQLite.create_table_animals=CREATE TABLE IF NOT EXISTS `animals` ( \
	`id`	INTEGER, \
	`name`	TEXT, \
	`image`	BLOB, \
	`user_id`	INTEGER, \
	PRIMARY KEY(`id` AUTOINCREMENT) \
)
SQLite.get_last_insert_id=SELECT LAST_INSERT_ROWID()

###############################################################################################
## SQL COMMANDS
###############################################################################################

## USERS
sql.insert_dummy_users=INSERT INTO `users` (`name`, `password`) VALUES \
('Alice', 'xxxxxx'), \
('Bob', 'yyyy')

# ANIMALS
sql.insert_dummy_animals=INSERT INTO `animals` \
(`name`, `user_id`) VALUES \
('Cat', 1), \
('Dog', 2), \
('Echidna', 1), \
('Fox', 0)
sql.select_user_animals=SELECT a.* FROM `animals` a \
JOIN `users` u ON a.`user_id` = u.`id` \
WHERE u.`name` = ? AND u.`password` = ?
sql.update_user_animals=UPDATE animals \
SET name = ? \
WHERE id = ? \
AND id IN (SELECT id FROM(SELECT a.id FROM animals a \
JOIN users u ON a.user_id = u.id \
AND u.name = ? AND u.password = ?) t)
sql.insert_user_animals=INSERT INTO `animals` \
(`name`, `user_id`) \
SELECT ?, `id` FROM `users` \
WHERE `name` = ? AND `password` = ?
sql.delete_user_animals=DELETE FROM `animals` \
WHERE `id` = ? \
AND `id` IN (SELECT a.`id` FROM `animals` a \
JOIN `users` u ON a.`user_id` = u.`id` \
WHERE u.`name` = ? AND u.`password` = ?)